# Use GitHub workflow/action/repo to implement gerrit-style topic function
#
# Copyright 2024 General Motors LLC
#
# This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 3 of the License, or any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty # of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with this program; if not, see <https://www.gnu.org/licenses>.
#
# Changelog:
# 20240724: Design by dw
name: topic_cmd
on:
  workflow_call:

jobs:
  topic_cmd:
    runs-on: ubuntu-latest
    env:
      WORKSPACE: ${{ github.workspace }}
      BUILD_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      JOB_CLONE_TOKEN: ${{ secrets.PR_TOPIC_ID }}:${{ secrets.PR_TOPIC_TOKEN }}@

    steps:
      - name: all-in-one topic list
        shell: bash
        run: |
          export PR_COMMENT_BASE64=$(echo "${{ github.event.comment.body }}" | base64 | head -n1)
          [[ ${PR_COMMENT_BASE64} != 'QHRvcGljX2xpc3QK' ]] && exit || true

          git config --global user.name "Ding Wei"
          git config --global user.email "noreply@github.com"
          git config --global core.autocrlf false

          rm -fr *.tmp || true

          export TOPIC_PR_BRANCH=${{ github.repository }}/pr${{ github.event.issue.number }}
          git clone -q --single-branch --depth=1 -b ${TOPIC_PR_BRANCH} \
          https://${JOB_CLONE_TOKEN}github.com/ORG/PR_topic_pool.git ${WORKSPACE}/topic_pool_pr.tmp

          export TOPIC_NAME=$(tail -n1 ${WORKSPACE}/topic_pool_pr.tmp/TOPIC)
          export TOPIC_BRANCH=$(dirname ${{ github.repository }})/topic-${TOPIC_NAME}
          git clone -q --single-branch --depth=1 -b ${TOPIC_BRANCH} \
          https://${JOB_CLONE_TOKEN}github.com/ORG/PR_topic_pool.git ${WORKSPACE}/topic_pool.tmp

          env TZ=America/Detroit date >>${GITHUB_STEP_SUMMARY}
          echo "[${GITHUB_WORKFLOW}#${GITHUB_RUN_NUMBER}](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}) in ${RUNNER_NAME}" >>${GITHUB_STEP_SUMMARY}
          echo "[PR#${{ github.event.issue.number }} TOPIC=${TOPIC_NAME}](https://github.com/${{ github.repository }}/pull/${{ github.event.issue.number }})" >>${GITHUB_STEP_SUMMARY}

          cd ${WORKSPACE}/topic_pool.tmp

          for PROJECT_NAME in $(ls)
          do
              unset TP_GH_REPO TP_PR_BASE_BRANCH TP_PR_HEAD_GIT_LOG TP_PR_HEAD_SHA TP_PR_URL
              source ${PROJECT_NAME}
              export TP_PR_HEAD_SHA_URL="https://github.com/${TP_GH_REPO}/commit/${TP_PR_HEAD_SHA}"
              echo "${TP_PR_BASE_BRANCH} | ${TP_PR_HEAD_GIT_LOG}<br>${TP_PR_HEAD_SHA_URL}<br>${TP_PR_URL}<br>\n- - -\n" >>${WORKSPACE}/topic_list_LF.tmp
          done

          sort -u ${WORKSPACE}/topic_list_LF.tmp | tr -d '\n' >${WORKSPACE}/topic_list.tmp
          echo "[TOPIC=${TOPIC_NAME}]\n[topic_list@$(date +%y%m%d-%H%M%S)](${BUILD_URL})" >>${WORKSPACE}/topic_list.tmp

          cat << _EOF_ >${WORKSPACE}/POST_topic_list.sh
          #!/bin/bash
          curl -i -s -k -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.PR_TOPIC_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments \
          -d '{"body":"$(cat ${WORKSPACE}/topic_list.tmp)"}'
          _EOF_
          bash ${WORKSPACE}/POST_topic_list.sh

      - name: topic build interface
        shell: bash
        run: |
          export PR_COMMENT_BASE64=$(echo "${{ github.event.comment.body }}" | base64 | head -n1)
          [[ ${PR_COMMENT_BASE64} != 'QHRvcGljX2J1aWxkCg==' ]] && exit || true
          echo "Call topic build workflow"

      - name: topic merge interface
        shell: bash
        run: |
          export PR_COMMENT_BASE64=$(echo "${{ github.event.comment.body }}" | base64 | head -n1)
          [[ ${PR_COMMENT_BASE64} != 'QHRvcGljX21lcmdlCg==' ]] && exit || true
          echo "Call topic merge workflow"

      - name: topic revert interface
        shell: bash
        run: |
          export PR_COMMENT_BASE64=$(echo "${{ github.event.comment.body }}" | base64 | head -n1)
          [[ ${PR_COMMENT_BASE64} != 'QHRvcGljX3JldmVydAo=' ]] && exit || true
          echo "Call topic revert workflow"

